{"backend_state":"running","connection_file":"/tmp/xdg-runtime-user/jupyter/kernel-620d6c2e-21ff-4ad4-b3b3-9f8e24839168.json","kernel":"python3","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1647211777441,"exec_count":1,"id":"86f9cb","input":"#imports needed for the code\nimport itertools\nfrom scipy.stats import entropy\nfrom collections import defaultdict, Counter\nfrom matplotlib import pyplot as plt \nimport numpy as np \nGUESSES = 10\nWORD_FILE_all = \"words.txt\"\nWORD_FILE = \"correct_words.txt\"\n\n#generates all possible combinations of grey, yellow and green letters, represented as 0,1,2. combinations\nall_patterns = list(itertools.product([0,1,2],repeat =5))\nlen(all_patterns)","kernel":"python3","output":{"0":{"data":{"text/plain":"243"},"exec_count":1}},"pos":6,"start":1647211776766,"state":"done","type":"cell"}
{"cell_type":"code","end":1647211777488,"exec_count":2,"id":"ee2bee","input":"orig_all_words = []\nf = open('words.txt', \"r\")\nfor x in f:\n    orig_all_words.append(x[0:5])\nall_words = set(orig_all_words)   \ncorrect_words = []\nf = open('correct_words.txt', \"r\")\nfor x in f:\n    correct_words.append(x[0:5])\n    \n","kernel":"python3","pos":8,"start":1647211777456,"state":"done","type":"cell"}
{"cell_type":"code","end":1647211777502,"exec_count":3,"id":"7269ca","input":"#returns the difference between guess and real\ndef get_pattern(guess,real):\n    wrong = [i for i,v in enumerate(guess) if v !=real[i]]\n    counts = Counter(real[i] for i in wrong)\n    pattern = [2,2,2,2,2]\n    for i in wrong:\n        v = guess[i]\n        if counts[v]>0:\n            pattern[i] = 1\n            counts[v] -=1\n        else:\n            pattern[i] =0\n    return tuple(pattern)","kernel":"python3","pos":10,"start":1647211777495,"state":"done","type":"cell"}
{"cell_type":"code","end":1647211778299,"exec_count":4,"id":"5a55ef","input":"#return a list of combinations between words\ndef generate_valid(s,d):\n    patterns = defaultdict(lambda: defaultdict(set))\n    for word2 in d:\n        patterns[s][get_pattern(s,word2)].add(word2)\n    return dict(patterns)","kernel":"python3","pos":13,"start":1647211778291,"state":"done","type":"cell"}
{"cell_type":"code","end":1647211779453,"exec_count":5,"id":"b0be5e","input":"#calc entropies for every word in wrods using total words as the pool\ndef calc_entropies(words, total_words):\n    entropies = {}\n    for word in words:\n        counts = []\n        for pattern in all_patterns:\n            matches = generate_valid(word,all_words)[word][pattern]\n            matches = matches.intersection(total_words)\n            counts.append(len(matches))\n        entropies[word]=entropy(counts)\n    return entropies","kernel":"python3","pos":17,"start":1647211779447,"state":"done","type":"cell"}
{"cell_type":"code","end":1647211780887,"exec_count":6,"id":"a139dc","input":"#Try and pick something that has a higher matching, since the kernel takes forever to run it, like mathcing only an e with a guess of salet for bribe took 2 minutes to compile.\ndef wordle(mystery,starter):\n    MYSTERY_WORD = mystery\n    STARTER_WORD = starter\n    all_words = set(orig_all_words)\n    info = get_pattern(STARTER_WORD,MYSTERY_WORD)\n    words = generate_valid(STARTER_WORD,all_words)\n    words = words[STARTER_WORD][info]\n    all_words = all_words.intersection(words)\n    print(\"The Mystery Word is:\", MYSTERY_WORD)\n    print('The current guess is : ', STARTER_WORD)\n    print(\"The current matching status is: \", info)\n\n\n        #took a shortcut b/c it took to long/ I cheated and looked through only the words in the right answer list that matched with our first guess. The only difference would be that choices would be all_words, but Cocalc can't handle 360*~13000.\n    choices = generate_valid(STARTER_WORD,correct_words)[STARTER_WORD][info]\n    entropies = calc_entropies(choices,all_words)\n    for attempt in range(1,GUESSES):\n        print(\"The Mystery Word is:\", MYSTERY_WORD)\n\n        if len(all_words) ==1:\n            print(\"Wordle bot guesses:\",all_words)\n            print(\"Guessed in this many rounds:\", attempt)\n            break\n        guess_word = max(entropies, key=entropies.get)\n        info = get_pattern(guess_word,MYSTERY_WORD)\n        print('The current guess is : ', guess_word)\n        print(\"The current matching status is: \", info)\n        if guess_word.__eq__(MYSTERY_WORD):\n            print(\"Guessed in this many rounds:\", attempt)\n            break\n        remaining = generate_valid(guess_word,all_words)[guess_word][info]\n        all_words = all_words.intersection(remaining)\n        entropies = calc_entropies(remaining,all_words)\n    return attempt\n   ","kernel":"python3","pos":20,"start":1647211780881,"state":"done","type":"cell"}
{"cell_type":"code","end":1647211783863,"exec_count":7,"id":"bd5cbb","input":"# Creating histogram\ndef grapher(x):\n    \n    plt.hist(x,bins=[i for i in range(0,11,1)],width =1)\n    plt.xlabel(\"X-axis\")\n    plt.ylabel(\"y-axis\")\n    plt.title('distribubion of the starter word')\n    \n    plt.xticks(np.arange(0,11,step=1))\n    \n    # Show plot\n    plt.show()","kernel":"python3","pos":24,"start":1647211783852,"state":"done","type":"cell"}
{"cell_type":"code","end":1647211899329,"exec_count":14,"id":"a03e52","input":"all_words = set(orig_all_words)","kernel":"python3","pos":41,"start":1647211899322,"state":"done","type":"cell"}
{"cell_type":"code","end":1647211951653,"exec_count":16,"id":"5d6bbb","input":"current = 'bonus'\ninfo = (0,2,0,2,2)\nwords = generate_valid(current,all_words)\nwords = words[current][info]\nall_words = all_words.intersection(words)\n\nchoices = generate_valid(current,correct_words)[current][info]\nentropies = calc_entropies(choices,all_words)\nmax_key = max(entropies, key=entropies.get)\nprint(max_key)","kernel":"python3","output":{"0":{"name":"stdout","text":"focus\n"}},"pos":42,"scrolled":true,"start":1647211951608,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"b2dc84","input":"","pos":36,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"93be97","input":"print(\"Thanks for your time\") ","output":{"0":{"name":"stdout","output_type":"stream","text":"Thanks for your time\n"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"f65223","input":"pattern = generate_valid('salet',orig_all_words)\nprint(pattern['salet'][1,1,1,1,1])","output":{"0":{"name":"stdout","output_type":"stream","text":"{'leats', 'tesla', 'teals'}\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"3cb08b","input":"calc_entropies('salet',correct_words)","output":{"0":{"data":{"text/plain":"{'s': 0.4365046890407941,\n 'a': 0.22945625477858408,\n 'l': 0.16157697703599758,\n 'e': 0.13855052742833301,\n 't': 0.23880701071780291}"},"exec_count":22,"output_type":"execute_result"}},"pos":18,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"bf9ab8","input":"#This took about 3 min to run, so be mindful when running it please.\nprint(wordle(\"pleat\",\"salet\"))","output":{"0":{"name":"stdout","output_type":"stream","text":"The Mystery Word is: pleat\nThe current guess is :  salet\nThe current matching status is:  (0, 1, 1, 1, 2)\n"},"1":{"name":"stdout","output_type":"stream","text":"The Mystery Word is: pleat\nThe current guess is :  leapt\nThe current matching status is:  (1, 1, 1, 1, 2)\n"},"2":{"name":"stdout","output_type":"stream","text":"The Mystery Word is: pleat\nWordle bot guesses: {'pleat'}\nGuessed in this many rounds: 2\n2\n"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"c4dc76","input":"get_pattern('salet','steal')","output":{"0":{"data":{"text/plain":"(2, 1, 1, 1, 1)"},"exec_count":5,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"9d96a1","input":"patterns = generate_valid('crane',['weary',\"sears\",\"crane\",\"adieu\"])\nprint(patterns['crane'][2,2,2,2,2])\nprint(patterns['crane'][0,1,2,0,1])\nprint(patterns['crane'][0,0,1,0,1])\n# print(patterns['weary'][0,0,0,0,1])","output":{"0":{"name":"stdout","output_type":"stream","text":"{'crane'}\n{'sears', 'weary'}\n{'adieu'}\n"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":79,"id":"8cd015","input":"arr = []\nfor i in range(1,100):\n    arr.append(wordle(correct_words[i],'salet'))\nprint(\"The average guesses it will take is\", sum(arr)/len(arr))\ngrapher(arr)","output":{"0":{"name":"stdout","output_type":"stream","text":"The average guesses it will take is 3.686868686868687\n"},"1":{"data":{"image/png":"f790976e1e25a5db3572815b3c9d3b6bf4d204b1","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":79,"metadata":{"image/png":{"height":440,"width":717},"needs_background":"light"},"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":80,"id":"b623e7","input":"arr = []\nfor i in range(1,100):\n    arr.append(wordle(correct_words[i],'crate'))\nprint(\"The average guesses it will take is\", sum(arr)/len(arr))\ngrapher(arr)","output":{"0":{"name":"stdout","output_type":"stream","text":"The average guesses it will take is 3.686868686868687\n"},"1":{"data":{"image/png":"74a00337ff4f51a5e5137fa48f604134a317c170","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":80,"metadata":{"image/png":{"height":440,"width":717},"needs_background":"light"},"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":81,"id":"9b8ebb","input":"arr = []\nfor i in range(1,100):\n    arr.append(wordle(correct_words[i],'lotus'))\nprint(\"The average guesses it will take is\", sum(arr)/len(arr))\ngrapher(arr)","output":{"0":{"name":"stdout","output_type":"stream","text":"The average guesses it will take is 3.6565656565656566\n"},"1":{"data":{"image/png":"cc44fdc1e583151b66c6fed612fc5880d8cd670e","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":81,"metadata":{"image/png":{"height":440,"width":717},"needs_background":"light"},"output_type":"execute_result"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":82,"id":"70d593","input":"arr = []\nfor i in range(1,100):\n    arr.append(wordle(correct_words[i],'adieu'))\nprint(\"The average guesses it will take is\", sum(arr)/len(arr))\ngrapher(arr)","output":{"0":{"name":"stdout","output_type":"stream","text":"The average guesses it will take is 3.9696969696969697\n"},"1":{"data":{"image/png":"9d7470fdadc48cf39a2ed42d1ffac81dc65a47b9","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":82,"metadata":{"image/png":{"height":440,"width":717},"needs_background":"light"},"output_type":"execute_result"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":83,"id":"a3166f","input":"arr = []\nfor i in range(1,100):\n    arr.append(wordle(correct_words[i],'fuzzy'))\nprint(\"The average guesses it will take is\", sum(arr)/len(arr))\ngrapher(arr)","output":{"0":{"name":"stdout","output_type":"stream","text":"The average guesses it will take is 4.262626262626263\n"},"1":{"data":{"image/png":"6dd556cd0ff68d2fe06e29201ba0262261f7512e","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":83,"metadata":{"image/png":{"height":440,"width":717},"needs_background":"light"},"output_type":"execute_result"}},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":84,"id":"cc8354","input":"arr = []\nfor i in range(1,100):\n    arr.append(wordle(correct_words[i],'xylyl'))\nprint(\"The average guesses it will take is\", sum(arr)/len(arr))\ngrapher(arr)","output":{"0":{"name":"stdout","output_type":"stream","text":"The average guesses it will take is 4.414141414141414\n"},"1":{"data":{"image/png":"723da21b102037b99c788507ab82b059371d28ef","text/plain":"<Figure size 864x504 with 1 Axes>"},"exec_count":84,"metadata":{"image/png":{"height":440,"width":717},"needs_background":"light"},"output_type":"execute_result"}},"pos":32,"type":"cell"}
{"cell_type":"markdown","id":"02f377","input":"The above code works well, but there are certain limitations. The biggest limitation that I found was where the program had to guess between words that rhymed with one another. IF you look where I wrote my comment, I use a smaller list than what is technically optimal. March 11 is a perfect example of what I mean. \"watch\" was the answer for the day. I had to bot guess \"salet\", then its next reccomended, the it guessed patch, then hatch, then finally watch. Luckily, w had a greater entropy value than b or m, so it didn't guess batch or match and lose the game. However this is a limitation. To avoid this potential 50/50, A normal human could guess something like blimp to eliminate most of these options. However, if blimp is not in the correct_words.txt, the program would never guess this to simplify the pool.","pos":21,"type":"cell"}
{"cell_type":"markdown","id":"0cdfce","input":"I usually compare the bot's performance against this guy: https://www.youtube.com/c/ScottStrosahl/videos, in case you want a day-to-day metric","pos":43,"type":"cell"}
{"cell_type":"markdown","id":"0e29ba","input":"# Extra lessons and tidbits.","pos":37,"type":"cell"}
{"cell_type":"markdown","id":"2680c0","input":"# Analysis","pos":33,"type":"cell"}
{"cell_type":"markdown","id":"28a9d5","input":"The code below is for reading in all possible five letter words, and the correct dictionary of words.","pos":7,"type":"cell"}
{"cell_type":"markdown","id":"2d452d","input":"## Wordle in practice, what is the best starting word?","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"326a9e","input":"# Finding the Best word\n## Just run the simulation for every single word combination, and find the one that takes the least average guesses.\nObviously the free version of Cocalc does not have that kind of processing power, so I just took some of my friend's favorite words, the best word \"salet\", according to 3blue1brown and the two worst in fuzzy, and xylyl.","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"450f3d","input":"This section is just extra functions and comments on the wordle program that I didn't really find a good place to put before my end.","pos":38,"type":"cell"}
{"cell_type":"markdown","id":"46f757","input":"## Math 157: Intro to Mathematical Software\n## UC San Diego, Winter 2022","pos":0,"type":"cell"}
{"cell_type":"markdown","id":"86c4b2","input":"Have fun testing it against the Wordle archives: https://www.devangthakkar.com/wordle_archive/?230","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"8955d9","input":"First things first I need to remake the Julia functions in Python, so here is the code below:","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"a1dbba","input":"This is where we compile a list of all patterns with our input word. This how we create a new pool of active words.","pos":12,"type":"cell"}
{"cell_type":"markdown","id":"a1f98c","input":"### Final project: Wordle and Information Theory by Raghav Maddukuri","pos":1,"type":"cell"}
{"cell_type":"markdown","id":"b90af1","input":"The code cell below is the customary import cell. I also generate all possible combinations for the word information we get back. You can see why I didn't code out the analyzing with if statements in the Julia lecture.","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"c63597","input":"Below is the wordle simulator, given a starter word, and a mystery word it will find the minimum number of guesses to find the mystery letter. ","pos":19,"type":"cell"}
{"cell_type":"markdown","id":"c9aaeb","input":"This is just a visualizer for the data we get back from the simulator.","pos":23,"type":"cell"}
{"cell_type":"markdown","id":"cafcdc","input":"Below we have a helper function that shows us the difference between two input words. It goes through both 5 letter words, determines whether the letter is green, yellow or grey. It does this by using the Counter object from python to store letters in the correct word. Then it goes through the list of letters we found to find if it exists in both letters at all, at the right position. Keep in mind this function in purely for the simulation, as this information, would be something we would normally input.","pos":9,"type":"cell"}
{"cell_type":"markdown","id":"d62f7d","input":"All the histograms above show us that regardless of the word you start with you can always guess the right word on average of 3-5 guesses. However, this number should be taken with a grain of salt. This is because the bot always know the most optimal second, third etc. guess. For example, lets say you start with \"salet\" and you get that there exists an L. The next best guess according to the bot is \"could\". No imagine knowing all 243 most optimal words for every single scenario. Then you need to know the most optimal word for what lights up for \"could\", and so on. Obviously, this isn't feasible for a human to know, honestly isn't very fun. Instead lets look at what the wordle teaches us. That regardless of how you start, you can always come back, and perform just as well as others. And that doesn't just apply to Wordle.","pos":34,"type":"cell"}
{"cell_type":"markdown","id":"d90f6c","input":"# Goal of this lecture:","pos":2,"type":"cell"}
{"cell_type":"markdown","id":"dac5a6","input":"# I do not recommend running these last two code cells as they took me about 5 minutes to compile, they are here to show you the code for determining how much worse the worst word is.","pos":30,"type":"cell"}
{"cell_type":"markdown","id":"e286f5","input":"In the code cells below you can have the bot play Wordle for you. Change current to reflect your last most guess, and change info to reflect the matching status of the letters, with 0 being grey, 1 being yellow, and 2 being green. Be sure to run the `all_words = set(orig_all_words)`, before every game as it will reset the active pool of words to every possible word, instead of just the last game's pool.","pos":39,"type":"cell"}
{"cell_type":"markdown","id":"e6cc3c","input":"This code cell centers on getting the total entropy for a list of words in relation to a given parameter. It shows the frequency of each letter in the word in the active pool of guesses. This is where the data in the histogram of letters comes from. I mainly had scipy do most of the work, so check out the documentation here: https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.entropy.html","pos":16,"type":"cell"}
{"id":0,"time":1647211759923,"type":"user"}
{"last_load":1647211760431,"type":"file"}